.TH EDIT 1 edit\-VERSION
.SH NAME
edit \- simple text editor
.SH SYNOPSIS
.B edit
.IB filename
.SH DESCRIPTION
edit is a modal, terminal\-based text editor. It aims to provide a simple yet
powerful editing model, in a suckless\-style codebase.
.P
edit uses a selection\-centric, selection\-then\-action model inspired by
kakoune, where a selection is a set of contiguous characters on a given line.
Indeed, most commands act on a list of selections: on saved selections if any,
otherwise on running selections.
.P
By default, the running selections list contains only the cursor, making the
selection abstraction invisible for simple editing. It is also possible to drop
an anchor below the cursor, making running selections contain all characters
between the anchor and the cursor. For more elaborate editing, such as
multi\-cursor or column editing, there are several ways to save selections.
.SH OPTIONS
.TP
.B \-v
prints version information to stderr, then exits.
.SH USAGE
The default mode is the normal mode, in which most keys are associated to an
edition command.
.P
For some commands, it makes sense to execute them multiple times. Enter a
multiplier
.IR m
before these commands to get the expected result. If no multiplier is specified,
the default value of 1 is assumed.
.SS Editor interaction
.TP
.B ?
display an help message
.TP
.B q/Q
quit/force quit
.TP
.B s
change a run\-time setting (see subsection "Run\-time settings")
.TP
.B e/E
execute make/a shell command and get back to edit
.SS File management
.TP
.B w/W
write/write as
.TP
.B R
reload
.SS Entering insert mode
.TP
.B i
enter insert mode (see subsection "Insert mode")
.P
It is also possible to enter insert mode at a specific location. However, these
commands do not combine well when applied to one than one selection, therefore
they empty the saved selections list and unanchor the anchor before entering
insert mode.
.TP
.B I/A
at the start/end of the cursor line
.TP
.B o/O
on an empty line created below/above the cursor line
.SS Navigation
.TP
.B l/h, Right/Left
move to
.IR m
\-th next/previous character
.TP
.B j/k, Down/Up
move to
.IR m
\-th next/previous line
.TP
.B g/G
move to
.IR m
\-th/last line of the file
.TP
.B m
move to matching bracket
.TP
.B 0/^/$
move to start/first non\-blank character/end of line
.TP
.B t/T
move to
.IR m
\-th next/previous word
.TP
.B }/{
move to
.IR m
\-th next/previous block
.TP
.B n/N
move to
.IR m
\-th next/previous selection
.TP
.B J
jump to
.IR m
\-th next match for prompted pattern (useful to navigate quickly through the file
without changing selections)
.SS Selections management
.TP
.B Escape
forget saved selections, unanchor, reset multiplier
.TP
.B c
display number of saved selections
.TP
.B v
anchor/unanchor
.TP
.B a
add running selections to saved selections, unanchor
.TP
.B z
duplicate the running selection on the next
.IR m
lines (designed for easy block/column editing)
.TP
.B ./%/b
select cursor line/all lines/
.IR m
blocks
.TP
.B :
select custom range of lines
.P
Custom ranges must be formatted
.IR min,max
where
.IR min
/
.IR max
is either empty (meaning 1/last line number), a dot (meaning cursor line
number) or an integer.
.TP
.B f, /
search for pattern (see subsection "Search pattern syntax")
.TP
.B *
search for the word that is currently under the cursor
.P
Searching will create a new saved selections list containing all substrings of
previously saved selections matching the given pattern.
.SS Edition commands
.TP
.B u/U
switch to lowercase/uppercase
.TP
.B K
comment/uncomment line
.TP
.B >/<, Tab/Shift\-Tab
.IR m
increase/decrease line indent
.TP
.B x, Delete/Backspace
suppress selection content if any, else
.IR m
characters after/before
.TP
.B r
replace (see subsection "Replace pattern syntax")
.TP
.B Control\-A
autocomplete with longest common prefix
.SS Lines management
edit has a line\-centric clipboard. The following commands do not act on
selections but directly on lines.
.TP
.B y/Y
yank
.IR m
lines/blocks, starting at cursor
.TP
.B d/D
delete
.IR m
lines/blocks, starting at cursor
.TP
.B p/P
paste after/before cursor line
.IR m
times
.TP
.B Shift\-Down/Shift\-Up
move lines of running selections
.IR m
lines down/up
.SS Insert mode
In insert mode, most keys insert their character before the selections.
.TP
.B Right, Left, Down, Up, Delete, Backspace, Control\-A, Shift\-Down, Shift\-Up
like in normal mode
.TP
.B Escape
get back to normal mode
.SS Dialog mode
When the editor need additionnal user input, it switches to dialog mode. In this
mode, the user is prompted something on the bottom line of the screen.
.TP
.B Left, Right, Control\-A, Control\-E
navigate the input
.TP
.B Up
recover the last input associated with the prompt
.TP
.B Down
clear the input
.TP
.B Delete/Backspace
suppress character after/before the cursor
.TP
.B Enter
validate input, get back to normal mode
.TP
.B Escape
cancel, get back to normal mode
.SS Run\-time settings
Setting assignements must be formatted
.IR name=value
where
.IR name
is in the following list and
.IR value
of the according type. Any integer value is considered a boolean, 0 meaning
FALSE and any other value meaning TRUE.
.TP
.B c
case sensitive (boolean, default: TRUE)
.TP
.B fs
field separator (character, default: ',')
.TP
.B h
highlight selections (boolean, default: TRUE)
.TP
.B l
language extension (string, default: deduced from filename)
.TP
.B sh
syntax highlight (boolean, default: TRUE)
.TP
.B tw
tab width (integer, default: 4)
.SS Search pattern syntax
.EX
<character> ::= <regular_char>          # character (not <esc_char>)
              | "\\" <esc_char>          # escaped character
              | "."                     # any character
              | "\\d" | "\\D"             # any [non] digit
              | "\\w" | "\\W"             # any [non] word character
              | "[" <set> "]"           # any character in <set>
              | "[^" <set> "]"          # any character not in <set>
.P
<esc_char> ::= "\\" | "^" | "$" | "|" | "(" | ")"
             | "*" | "+" | "?" | "{" | "[" | "."
.P
<set> ::= <items>                       # <item> characters
        | "\-" <items>                   # "\-" and <items> characters
        | <items> "\-"                   # "\-" and <items> characters
        | "\-" <items> "\-"               # "\-" and <items> characters
.P
<items> ::= <non_minus>                 # character (not "\-")
          | <non_minus> "\-" <non_minus> # range (inclusive)
          | <items> <items>             # characters in either <items>
.P
<repeater> ::= ""                       # exactly 1
             | "+"                      # 1 or more (at least once)
             | "?"                      # 0 or 1 (at most once)
             | "*" | "{}"               # 0 or more (any number)
             | "{" <int> "}"            # exactly <int>
             | "{" <int> ",}"           # at least <int>
             | "{," <int> "}"           # at most <int>
             | "{" <int> "," <int> "}"  # range (inclusive)
.P
<int> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
        | <int> <int>
.P
<assertion> ::= "^" | "$"               # start/end of line
              | "\\A" | "\\Z"             # start/end of selection
              | "\\b" | "\\B"             # [non] words boundary
.P
<atom> ::= <assertion> | <character> <repeater>
.P
<OR_atom> ::= <atom> | <OR_atom> "|" <atom>
.P
<group> ::= "" | <group> <OR_atom>
.P
<block> ::= <atom> | "(" <group> ")" <repeater>
.P
<OR_block> ::= <block> | <OR_block> "|" <block>
.P
<pattern> ::= "" | <pattern> <OR_block>
.EE
.SS Replace pattern syntax
.EX
<pattern> ::= <regular_char>            # character (not "\\" or "$")
            | "\\\\" | "\\$"               # escaped "\\" and "$"
            | "\\0" | "$0"               # whole initial selection
            | "\\" <pos_digit>           # <pos_digit>\-th subpattern
            | "$" <pos_digit>           # <pos_digit>\-th field
            | <pattern> <pattern>       # concatenation

.P
<pos_digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
.EE
.SH NOTES
.SS Search and replace engine
The search and replace engine is home\-grown. While it has some caveats (see
section "ISSUES"), it is quite capable: the search is incremental and supports
regular expressions, and the replace supports the reuse of subpatterns and
fields from the to\-be\-replaced string.
.P
Using the engine should feel pretty straightforward as it can be used in a
typical sed fashion:
.TP
.B (1)
Choose a line range with
.B %
or
.B b
or
.B :
or
.B .
.TP
.B (2)
Specify a search pattern with
.B f
or
.B /
.TP
.B (3)
Specify a replace pattern with
.B r
.P
But there is more to it than a sed imitation. Using a home\-grown engine allows
for better integration with the editor. Indeed, as all these steps make sense
individually, one can use any combination of these.
.P
Syntaxes are described in a Backus\-Naur form notation in subsections
"Search pattern syntax" and "Replace pattern syntax".
.SS Syntax highlighting system
Designing a syntax highlighting system capable enough to perform exhaustive,
semantically correct syntax highlighting for many languages is very
challenging. In the context of a tiny, autonomous codebase, this goal is soon
forgotten.
.P
edit syntax highlighting system try to balance capability and simplicity. Its
semantic understanding is limited, and is designed to process lines
individually. Its simplicity makes it really easy to add language support, and
easy to compute at runtime.
.P
It works well for keywords, numbers, monoline strings/comments, and markup
languages where a line break is significant (Markdown or Gemtext for example);
but not so much for multilines strings/comments or some other markup languages
(XML or LaTeX for example).
.P
The commenting command use single line comments: the user is encouraged to use
it over ranges of lines instead of using multiline comments.
.SS Encoding
edit only works with UTF\-8 encoded text.
.SS Tabulations
edit is designed to work with spaces, not tabs. When opening a file, tabs are
converted to spaces (according to the
.BR TAB_WIDTH
value).
.P
Unfortunately, some languages recquire tabs (makefiles are an example). To
accomodate these, the language\-level
.BR CONVERT_LEADING_SPACES
flag can be set so that leading spaces are converted back to tabs when saving.
.SS Trailing spaces
By default, the
.BR SUPPRESS_TRAILING_SPACES
option is set, which has the effect of ignoring trailing spaces when saving.
.SS Multiple selections on a given line
Selections can not overlap.
.P
Indenting and commenting is performed at most once per line, no matter how much
selections a line contains.
.SS Undo/redo
There is no undo/redo mechanism. Instead, the user is advised to save frequently
and reload the file when a set of actions is to be reverted.
.SS Arbitrary yanking
It is not possible to yank only a part of a given line. The clipboard is
designed to work with ranges of lines, not arbitrary text sequences.
.SS Lines wrapping
It is not possible to wrap lines.
.SH CUSTOMIZATION
edit is customized by creating a custom
.IR config.h
and (re)compiling the source code. This keeps it fast, secure and simple.
.SS Languages support
Supported languages are defined in
.IR languages.h
with two
.B #ifdef
.IB LANGUAGE
enclosed parts (one for language declaration, one for inclusion in the
.B languages
array). Mimicking other languages is advised when adding support for a new
anguage.
.SH SEE ALSO
.BR kakoune (1)
.SH ISSUES
.SS Repeaters in regular expressions
Repeaters always match as much as possible, potentially eating too much
characters and invalidating a valid match.
.P
For example, ".*." never matches anything because the leading ".*" eats all the
selection, leaving no more characters to be matched by the trailing ".".
.SS C99 compliance
The terminal drawing library
.IR termbox2.h
is not C99 compliant, in a non\-critical way.
.SH BUGS
Send all bug reports with a patch to arthur@jacquin.xyz.
